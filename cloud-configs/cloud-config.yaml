#cloud-config
#apt_mirror: http://sg.archive.ubuntu.com/ubuntu/

apt:
  # Preserve existing /etc/apt/sources.list
  # Default: overwrite sources_list with mirror.  If this is true
  # then apt_mirror above will have no effect
  preserve_sources_list: false

  sources:
    # Byobu PPA
    byobu-ppa:
      source: "ppa:byobu/ppa"
      # source: "deb [arch=amd64,arm64 signed-by=$KEY_FILE] http://ppa.launchpad.net/byobu/ppa/ubuntu focal main"
      # keyid: A42A415B4677D2D22EB05723CF5E7496F430BBA5
        # Git PPA
    git:
      source: "ppa:git-core/ppa"
      # source: "deb [arch=amd64,arm64 signed-by=$KEY_FILE] http://ppa.launchpad.net/git-core/ppa/ubuntu $RELEASE main"
      # keyid: F911AB184317630C59970973E363C90F8F1B6217
    # Kubernetes
    kubernetes.list:
      source: "deb [signed-by=$KEY_FILE] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /"
      keyid: DE15B14486CD377B9E876E1A234654DA9A296436
    # Docker-CE
    docker-ce.list:
      source: "deb [arch=amd64,arm64 signed-by=$KEY_FILE] https://download.docker.com/linux/ubuntu $RELEASE stable"
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    # Terraform
    terraform.list:
      source: "deb [arch=amd64,arm64 signed-by=$KEY_FILE] https://apt.releases.hashicorp.com $RELEASE main"
      keyid: 798AEC654E5C15428C8E42EEAA16FCBCA621E701
    # GitHub Cli
    githubcli.list:
      source: "deb [arch=amd64,arm64 signed-by=$KEY_FILE] https://cli.github.com/packages stable main"
      keyid: 2C6106201985B60E6C7AC87323F3D4EA75716059

# Install additional packages on first boot
#
# Default: none
#
# if packages are specified, this apt_update will be set to true
#
packages:
 - apt-transport-https
 - ca-certificates
 - curl
 - software-properties-common
 - jq
 - docker-ce
 - docker-ce-cli
 - containerd.io
 - kubectl=1.32.2-*
 - terraform
 - genisoimage
 - xorriso
 - pipx
 - figlet
 - gh
 - make

# Default: true
# Aliases: apt_update
package_update: true

# Default: false
# Aliases: apt_upgrade
package_upgrade: true

# Reboot after package install/update if necessary
# Default: false
# Aliases: apt_reboot_if_required
package_reboot_if_required: false

# mount_default_fields
# These values are used to fill in any entries in 'mounts' that are not
# complete.  This must be an array, and must have 7 fields.
mount_default_fields: [ None, None, "auto", "defaults,nobootwait", "0", "2" ]

# Add groups to the system
# The following example adds the ubuntu group with members foo and bar and
# the group cloud-users.
groups:
  - student

# Add users to the system. Users are added after groups are added.
users:
  - default
  - name: student
    gecos: student
    primary_group: student
    groups: docker
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    # ssh_authorized_keys:
    #   - ssh-ed25519 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY

# Enable PasswordAuthentication in /etc/ssh/sshd_config
ssh_pwauth: true

# Set user password
chpasswd:
  expire: false
  users:
    - name: student
      password: student
      type: text

# Enable PasswordAuthentication in /etc/ssh/sshd_config
# ssh_pwauth: true

# manage byobu defaults
# byobu_by_default:
#   'user' or 'enable-user': set byobu 'launch-by-default' for the default user
#   'system' or 'enable-system' or 'enable':
#      enable 'launch-by-default' for all users, do not modify default user
#   'disable': disable both default user and system
#   'disable-system': disable system
#   'disable-user': disable for default user
#   not-set: no changes made
byobu_by_default: enable-system

# disable_root_opts: the value of this variable will prefix the
# respective key in /root/.ssh/authorized_keys if disable_root is true
# see 'man authorized_keys' for more information on what you can do here
#
# The string 'student' will be replaced with the username of the default user
#
# disable_root_opts: no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command="echo 'Please login as the user \"student\" rather than the user \"root\".';echo;sleep 10"

# set the locale to a given locale
# default: en_US.UTF-8
locale: en_SG.UTF-8
# render template default-locale.tmpl to locale_configfile
locale_configfile: /etc/default/locale

# resize_rootfs should the / filesytem be resized on first boot
# this allows you to launch an instance with a larger disk / partition
# and have the instance automatically grow / to accomoddate it
# set to 'False' to disable
# by default, the resizefs is done early in boot, and blocks
# if resize_rootfs is set to 'noblock', then it will be run in parallel
resize_rootfs: True

# final_message
# default: cloud-init boot finished at $TIMESTAMP. Up $UPTIME seconds
# this message is written by cloud-final when the system is finished
# its first boot
final_message: "The system is finally up, after $UPTIME seconds"

# timezone: set the timezone for this instance
# the value of 'timezone' must exist in /usr/share/zoneinfo
timezone: Asia/Singapore

#
# Set NTP
ntp:
  enabled: true
# manual cache clean.
#  By default, the link from /var/lib/cloud/instance to
#  the specific instance in /var/lib/cloud/instances/ is removed on every
#  boot.  The cloud-init code then searches for a DataSource on every boot
#  if your DataSource will not be present on every boot, then you can set
#  this option to 'True', and maintain (remove) that link before the image
#  will be booted as a new instance.
# default is False
# manual_cache_clean: True

# When cloud-init is finished running including having run
# cloud_init_modules, then it will run this command.  The default
# is to emit an upstart signal as shown below.  If the value is a
# list, it will be passed to Popen.  If it is a string, it will be
# invoked through 'sh -c'.
#
# default value:
# cc_ready_cmd: [ initctl, emit, cloud-config, CLOUD_CFG=/var/lib/instance/cloud-config.txt ]
# example:
# cc_ready_cmd: [ sh, -c, 'echo HI MOM > /tmp/file' ]

## configure interaction with ssh server
# ssh_svcname: ssh
#    set the name of the option to 'service restart'
#    in order to restart the ssh daemon. For fedora, use 'sshd'
#    default: ssh
ssh_deletekeys: True
#    boolean indicating if existing ssh keys should be deleted on a
#    per-instance basis.  On a public image, this should absolutely be set
#    to 'True'
ssh_genkeytypes: [rsa, ecdsa, ed25519]
#    a list of the ssh key types that should be generated
#    These are passed to 'ssh-keygen -t'

## configuration of ssh keys output to console
ssh_fp_console_blacklist: [ed25519]
ssh_key_console_blacklist: [ssh-dss]
#   A list of key types (first token of a /etc/ssh/ssh_key_*.pub file)
#   that should be skipped when outputting key fingerprints and keys
#   to the console respectively.

# This is an example file to automatically configure resolv.conf when the
# instance boots for the first time.
#
# Ensure that your yaml is valid and pass this as user-data when starting
# the instance. Also be sure that your cloud.cfg file includes this
# configuration module in the appropriate section.
#
# manage-resolv-conf: true

# resolv_conf:
#  nameservers: ['8.8.4.4', '8.8.8.8']

# This is the configuration syntax that the write_files module
# will know how to understand. encoding can be given b64 or gzip or (gz+b64).
# The content will be decoded accordingly and then written to the path that is
# provided.

write_files:
- content: |
      #!/usr/bin/env bash

      pushd /tmp
        #
        #  _           _
        # | |__  _   _| |__   ___ _ __
        # | '_ \| | | | '_ \ / _ \ '__|
        # | | | | |_| | |_) |  __/ |
        # |_| |_|\__,_|_.__/ \___|_|
        #
        #
        su - student -c "curl -sfSL https://raw.githubusercontent.com/innobead/huber/main/hack/install.sh | sh -"
        #
        #  _          _               _   _
        # | | ___   _| |__   ___  ___| |_| |
        # | |/ / | | | '_ \ / _ \/ __| __| |
        # |   <| |_| | |_) |  __/ (__| |_| |
        # |_|\_\\__,_|_.__/ \___|\___|\__|_|
        #
        #
        # curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        # curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        # echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
        # install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        #
        #
        #  _    _           _
        # | | _(_)_ __   __| |
        # | |/ / | '_ \ / _` |
        # |   <| | | | | (_| |
        # |_|\_\_|_| |_|\__,_|
        #
        #
        curl -LO "https://kind.sigs.k8s.io/dl/v0.27.0/kind-linux-amd64"
        curl -LO "https://kind.sigs.k8s.io/dl/v0.27.0/kind-linux-amd64.sha256sum"
        echo "$(cat kind-linux-amd64.sha256sum)" | sha256sum --check
        install -o root -g root -m 0755 kind-linux-amd64 /usr/local/bin/kind
        #
        #
        #  _     ___
        # | | __/ _ \ ___
        # | |/ / (_) / __|
        # |   < \__, \__ \
        # |_|\_\  /_/|___/
        #
        #
        curl -LO "https://github.com/derailed/k9s/releases/download/v0.40.3/k9s_Linux_amd64.tar.gz"
        curl -LO "https://github.com/derailed/k9s/releases/download/v0.40.3/checksums.sha256"
        sha256sum --check --ignore-missing checksums.sha256
        tar zxvf k9s_Linux_amd64.tar.gz k9s
        install -o root -g root -m 0755 k9s /usr/local/bin/k9s
        #
        #
        #  _          _
        # | |__   ___| |_ __ ___
        # | '_ \ / _ \ | '_ ` _ \
        # | | | |  __/ | | | | | |
        # |_| |_|\___|_|_| |_| |_|
        #
        #
        curl -LO "https://get.helm.sh/helm-v3.17.1-linux-amd64.tar.gz"
        curl -LO "https://get.helm.sh/helm-v3.17.1-linux-amd64.tar.gz.sha256sum"
        sha256sum --check helm-v3.17.1-linux-amd64.tar.gz.sha256sum
        tar zxvf helm-v3.17.1-linux-amd64.tar.gz linux-amd64/helm
        install -o root -g root -m 0755 linux-amd64/helm /usr/local/bin/helm
        #
        #
        #          _ _ _  _
        #  _______| | (_)(_)
        # |_  / _ \ | | || |
        #  / /  __/ | | || |
        # /___\___|_|_|_|/ |
        #              |__/
        #
        #
        # curl -LO "https://github.com/zellij-org/zellij/releases/download/$ZELLIJ_VER/zellij-x86_64-unknown-linux-musl.tar.gz"
        # curl -LO "https://github.com/zellij-org/zellij/releases/download/$ZELLIJ_VER/zellij-x86_64-unknown-linux-musl.sha256sum"
        # tar zxvf zellij-x86_64-unknown-linux-musl.tar.gz zellij
        # sha256sum --check zellij-x86_64-unknown-linux-musl.sha256sum
        # install -o root -g root -m 0755 zellij /usr/local/bin/zellij
        #
        #
        #            _       _ _          _
        #  _ __ ___ (_)_ __ (_) | ___   _| |__   ___
        # | '_ ` _ \| | '_ \| | |/ / | | | '_ \ / _ \
        # | | | | | | | | | | |   <| |_| | |_) |  __/
        # |_| |_| |_|_|_| |_|_|_|\_\\__,_|_.__/ \___|
        #
        #
        curl -LO https://github.com/kubernetes/minikube/releases/latest/download/minikube-linux-amd64
        curl -LO https://github.com/kubernetes/minikube/releases/latest/download/minikube-linux-amd64.sha256
        echo "$(cat minikube-linux-amd64.sha256)  minikube-linux-amd64" | sha256sum --check
        install -o root -g root -m 0755 minikube-linux-amd64 /usr/local/bin/minikube
        #
        #
        #                      _   _
        #   ___ _ __ ___   ___| |_| |
        #  / __| '_ ` _ \ / __| __| |
        # | (__| | | | | | (__| |_| |
        #  \___|_| |_| |_|\___|\__|_|
        #
        #
        curl -LO https://github.com/cert-manager/cmctl/releases/latest/download/cmctl_linux_amd64.tar.gz
        curl -LO https://github.com/cert-manager/cmctl/releases/latest/download/checksums.txt
        sha256sum --check --ignore-missing checksums.txt
        tar zxvf cmctl_linux_amd64.tar.gz cmctl
        install -o root -g root -m 0755 cmctl /usr/local/bin/cmctl
        #
        #
        #  _   _  __ _
        # | | | |/ _` |
        # | |_| | (_| |
        #  \__, |\__, |
        #  |___/    |_|
        #
        #
        curl -LO https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        curl -LO https://github.com/mikefarah/yq/releases/latest/download/checksums
        echo "$(grep linux checksums | grep amd | grep -v tar | awk '{print $19}')  yq_linux_amd64" | sha256sum --check
        install -o root -g root -m 0755 yq_linux_amd64 /usr/local/bin/yq
        #
        #
        #       _ _ _                         _ _
        #   ___(_) (_)_   _ _ __ ___      ___| (_)
        #  / __| | | | | | | '_ ` _ \    / __| | |
        # | (__| | | | |_| | | | | | |  | (__| | |
        #  \___|_|_|_|\__,_|_| |_| |_|___\___|_|_|
        #                           |_____|
        #
        #
        curl -sL --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/v0.16.24/cilium-linux-amd64.tar.gz{,.sha256sum}
        sha256sum --check cilium-linux-amd64.tar.gz.sha256sum
        tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin/
        curl -L --fail --remote-name-all https://github.com/cilium/hubble/releases/download/v1.17.1/hubble-linux-amd64.tar.gz{,.sha256sum}
        sha256sum --check hubble-linux-amd64.tar.gz.sha256sum
        tar xzvfC hubble-linux-amd64.tar.gz /usr/local/bin/
        #
        #
        #   __ _  _____   _____
        #  / _` |/ _ \ \ / / __|
        # | (_| | (_) \ V / (__
        #  \__, |\___/ \_/ \___|
        #  |___/
        #
        #
        curl -L -o - "https://github.com/vmware/govmomi/releases/latest/download/govc_$(uname -s)_$(uname -m).tar.gz" | tar -C /usr/local/bin -xvzf - govc
        #
        #
        #   ___                 _____      __
        #  / _ \ _ __   ___ _ _|_   _|__  / _|_   _
        # | | | | '_ \ / _ \ '_ \| |/ _ \| |_| | | |
        # | |_| | |_) |  __/ | | | | (_) |  _| |_| |
        #  \___/| .__/ \___|_| |_|_|\___/|_|  \__,_|
        #       |_|
        #
        #
        curl --proto '=https' --tlsv1.2 -fsSL https://get.opentofu.org/install-opentofu.sh -o install-opentofu.sh
        chmod +x install-opentofu.sh
        ./install-opentofu.sh --install-method deb
        #
        #
        #  ____                        ____  _          _ _
        # |  _ \ _____      _____ _ __/ ___|| |__   ___| | |
        # | |_) / _ \ \ /\ / / _ \ '__\___ \| '_ \ / _ \ | |
        # |  __/ (_) \ V  V /  __/ |   ___) | | | |  __/ | |
        # |_|   \___/ \_/\_/ \___|_|  |____/|_| |_|\___|_|_|
        #
        #
        VERSION_ID=$(lsb_release -r | awk '{print $2}')
        curl -SLO https://packages.microsoft.com/config/ubuntu/$VERSION_ID/packages-microsoft-prod.deb
        dpkg -i packages-microsoft-prod.deb
        # Install PowerShell & OpenTofu
        apt-get update
        apt-get install -y tofu powershell
        # yes | pwsh -Command "install-module -name VMware.PowerCLI"
        #
        #
        #      _ _
        #   __| (_)_ __ ___ _ ____   __
        #  / _` | | '__/ _ \ '_ \ \ / /
        # | (_| | | | |  __/ | | \ V /
        #  \__,_|_|_|  \___|_| |_|\_/
        #
        #
        export bin_path=/usr/local/bin ; curl -sfL https://direnv.net/install.sh | bash
        unset bin_path
        #
        #
        #       _
        # __  _| |__
        # \ \/ / '_ \
        #  >  <| | | |
        # /_/\_\_| |_|
        #
        #
        XH_VERSION=$(curl -sSL https://api.github.com/repos/ducaale/xh/releases/latest | jq -Mr '.tag_name')
        curl -LO https://github.com/ducaale/xh/releases/latest/download/xh_${XH_VERSION:1}_amd64.deb
        dpkg -i xh_${XH_VERSION:1}_amd64.deb
        #
        #
        #   __     __
        #  / _|___/ _|
        # | ||_  / |_
        # |  _/ /|  _|
        # |_|/___|_|
        #
        #
        export _FZF_VER=v0.60.0
        curl -SL https://github.com/junegunn/fzf/releases/download/"$_FZF_VER"/fzf-"${_FZF_VER:1}"-linux_amd64.tar.gz | tar -C /usr/local/bin -zxvf - fzf
        #
      popd
      mkdir -p /home/student/Projects/kind
      mkdir -p /home/student/.local/bin
      #
      cat <<'EOF' | tee -a /home/student/Projects/kind/bashrc
      #
      alias k=kubectl
      alias mk=minikube
      source <(k completion bash)
      complete -o default -F __start_kubectl k
      source <(kind completion bash)
      source <(helm completion bash)
      source <(k9s completion bash)
      source <(fzf --bash)
      source <(huber completions bash)
      source <(minikube completion bash)
      complete -o default -F __start_minikube mk
      eval "$(direnv hook bash)"
      eval "$(gh completion -s bash)"
      EOF
      #
      mkdir /home/student/.byobu/
      cat <<EOF > /home/student/.byobu/keybindings.tmux
      unbind-key -n C-a
      set -g prefix ^A
      set -g prefix2 F12
      bind a send-prefix
      EOF
      #
      cat <<EOF > /home/student/Projects/kind/vimrc
      let g:dracula_italic = 0
      packadd! dracula
      syntax enable
      colorscheme dracula
      set nu rnu
      autocmd FileType yaml,yml,sh setlocal ts=2 sts=2 sw=2 et ai
      set pastetoggle=<F10>
      EOF
      #
      mkdir -p /home/student/.vim/pack/themes/start
      pushd /home/student/.vim/pack/themes/start
        git clone -n --depth=1 --filter=tree:0 https://github.com/dracula/vim.git dracula
        pushd /home/student/.vim/pack/themes/start/dracula
          git sparse-checkout set --no-cone after autoload colors docs
          git checkout
          rm -rf .git
        popd
      popd
      #
      cat <<EOF | tee -a /home/student/Projects/kind/kind.yaml
      kind: Cluster
      apiVersion: kind.x-k8s.io/v1alpha4
      networking:
        disableDefaultCNI: false # disable kindnet
        podSubnet: 192.168.0.0/16 # set to Calico's default subnet
      nodes:
      - role: control-plane
        image: kindest/node:v1.32.2@sha256:f226345927d7e348497136874b6d207e0b32cc52154ad8323129352923a3142f
      - role: worker
        image: kindest/node:v1.32.2@sha256:f226345927d7e348497136874b6d207e0b32cc52154ad8323129352923a3142f
      - role: worker
        image: kindest/node:v1.32.2@sha256:f226345927d7e348497136874b6d207e0b32cc52154ad8323129352923a3142f
      EOF
      #
      cat <<OUTEOF > /home/student/.local/bin/metallb.sh
      #!/usr/bin/env bash
      helm repo add metallb https://metallb.github.io/metallb
      # helm install metallb metallb/metallb --namespace metallb-system --create-namespace --set loadBalancerClass=metallb
      helm install metallb metallb/metallb --namespace metallb-system --create-namespace
      kubectl wait --namespace metallb-system \\
                   --for=condition=ready pod \\
                   --selector=app.kubernetes.io/name=metallb \\
                   --timeout=120s
      cat <<EOF | kubectl apply -f -
      ---
      apiVersion: metallb.io/v1beta1
      kind: IPAddressPool
      metadata:
        name: default
        namespace: metallb-system
      spec:
        addresses:
        - 10.254.254.248-10.254.254.254

      ---
      apiVersion: metallb.io/v1beta1
      kind: L2Advertisement
      metadata:
        name: default
        namespace: metallb-system
      EOF
      OUTEOF
      #
      cat <<EOF > /home/student/.local/bin/metrics-server.sh
      #!/usr/bin/env bash
      helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/
      helm install metrics-server metrics-server/metrics-server \\
        --set args={--kubelet-insecure-tls=true}
      kubectl wait --namespace=default \\
                   --for=condition=ready pod \\
                   --selector=app.kubernetes.io/instance=metrics-server \\
                   --timeout=180s
      EOF
      #
      cat <<EOF > /home/student/.local/bin/ingress-nic.sh
      #!/usr/bin/env bash
      helm repo add nginx-stable https://helm.nginx.com/stable
      helm install main nginx-stable/nginx-ingress \\
        --set controller.watchIngressWithoutClass=true \\
        --set controller.service.externalTrafficPolicy=Cluster \\
        --set controller.ingressClass.name=nginx-oss
      kubectl wait \\
        --namespace=default \\
        --for=condition=ready pod \\
        --selector=app.kubernetes.io/name=nginx-ingress \\
        --timeout=90s
      EOF
      #
      cat <<EOF > /home/student/.local/bin/ingress-kic.sh
      #!/usr/bin/env bash
      helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      helm install ingress-nginx ingress-nginx/ingress-nginx \\
        --namespace ingress-nginx \\
        --create-namespace \\
        --set controller.ingressClassResource.name=ingress-nginx
      EOF
      #
      cat <<EOF > /home/student/.local/bin/cert-manager.sh
      #!/usr/bin/env bash
      helm repo add jetstack https://charts.jetstack.io
      helm install \\
        cert-manager jetstack/cert-manager \\
        --namespace cert-manager \\
        --create-namespace \\
        --set crds.enabled=true \\
        # --set "extraArgs={--enable-gateway-api=true}"
      EOF
      #
      cat <<EOF > /home/student/Projects/kind/ingress.yaml
      ---
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        annotations:
          nginx.org/rewrites: serviceName=tea rewrite=/;serviceName=coffee rewrite=/
        name: ingress
      spec:
        ingressClassName: nginx-oss
        rules:
        - host: www.kopi-teh.com
          http:
            paths:
            - backend:
                service:
                  name: coffee
                  port:
                    number: 80
              path: /coffee/
              pathType: Prefix
            - backend:
                service:
                  name: tea
                  port:
                    number: 80
              path: /tea/
              pathType: Prefix
      EOF
      #
      cat <<EOF > /home/student/Projects/kind/ingress-tls.yaml
      ---
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        annotations:
          nginx.org/rewrites: serviceName=tea rewrite=/;serviceName=coffee rewrite=/
        name: ingress-tls
      spec:
        ingressClassName: nginx-oss
        rules:
        - host: www.kopi-teh.com
          http:
            paths:
            - backend:
                service:
                  name: coffee
                  port:
                    number: 80
              path: /coffee/
              pathType: Prefix
            - backend:
                service:
                  name: tea
                  port:
                    number: 80
              path: /tea/
              pathType: Prefix
        tls:
        - hosts:
          - www.kopi-teh.com
          secretName: kopi-teh
      EOF
      #
      cat <<EOF > /home/student/Projects/kind/san.cnf
      [req]
      distinguished_name = req_distinguished_name
      x509_extensions = v3_req
      prompt = no
      [req_distinguished_name]
      C = SG
      ST = CBD
      L = SuntecCity
      O = F5
      OU = Training
      CN = www.kopi-teh.com
      [v3_req]
      keyUsage = keyEncipherment, dataEncipherment
      extendedKeyUsage = serverAuth
      subjectAltName = @alt_names
      [alt_names]
      DNS.1 = www.kopi-teh.com
      DNS.2 = www.coffee.net
      DNS.3 = www.tea.io
      EOF
      #
      cat <<EOF > /home/student/Projects/kind/selfsigned-issuer.yaml
      ---
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: selfsigned-issuer
        namespace: default
      spec:
        selfSigned: {}
      EOF
      #
      cat <<EOF > /home/student/Projects/kind/ca-certificate.yaml
      ---
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: my-selfsigned-ca
        namespace: default
      spec:
        isCA: true
        commonName: my-selfsigned-ca
        secretName: root-secret
        privateKey:
          algorithm: ECDSA
          size: 256
        issuerRef:
          name: selfsigned-issuer
          kind: Issuer
          group: cert-manager.io
      EOF
      #
      cat <<EOF > /home/student/Projects/kind/ca-issuer.yaml
      ---
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: my-ca-issuer
        namespace: default
      spec:
        ca:
          secretName: root-secret
      EOF
      #
      cat <<EOF > /home/student/Projects/kind/ca-cluster-issuer.yaml
      ---
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: my-ca-cluster-issuer
      spec:
        ca:
          secretName: root-secret
      EOF
      #
      # k9s skin
      #
      mkdir -p /home/student/.config/k9s/skins/
      curl -sSL https://raw.githubusercontent.com/derailed/k9s/master/skins/monokai.yaml -o /home/student/.config/k9s/skins/monokai.yaml
      cat <<EOF > /home/student/.config/k9s/config.yaml
      k9s:
        liveViewAutoRefresh: false
        refreshRate: 2
        maxConnRetry: 5
        readOnly: false
        noExitOnCtrlC: false
        ui:
          enableMouse: false
          headless: true
          logoless: true
          crumbsless: true
          noIcons: false
          skin: monokai
        skipLatestRevCheck: false
        disablePodCounting: false
        shellPod:
          image: busybox:1.35.0
          namespace: default
          limits:
            cpu: 100m
            memory: 100Mi
        imageScans:
          enable: false
          exclusions:
            namespaces: []
            labels: {}
        logger:
          tail: 100
          buffer: 5000
          sinceSeconds: -1
          fullScreen: false
          textWrap: false
          showTime: false
        thresholds:
          cpu:
            critical: 90
            warn: 70
          memory:
            critical: 90
            warn: 70
      EOF
      chown -R student:student /home/student
      #
      # pyenv
      #
      pushd /home/student
        git clone --depth 1 https://github.com/pyenv/pyenv.git .pyenv
        PYENV_MODULES=(doctor \
                      installer \
                      update \
                      virtualenv \
                      which-ext)
        for module in "${PYENV_MODULES[@]}";
        do
          git clone --depth 1 https://github.com/pyenv/pyenv-"$module".git /home/student/.pyenv/plugins/pyenv-"$module"
        done
      popd

      cat <<'EOF' | tee -a /home/student/Projects/kind/bashrc

      function cd {
          builtin cd "$@"
          if [ -f "Pipfile" ] ; then
              pipenv shell
          fi
      }

      function ghrl {
        curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/rate_limit
      }

      function dhrl {
        DH_TOKEN=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)
        curl -sI -H "Authorization: Bearer $DH_TOKEN" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest 2>&1 | grep -i RateLimit
      }

      EOF
      #
      # install pyenv dependencies
      #
      cat <<'EOF' | tee /home/student/.local/bin/install-pyenv-dependencies.sh
      #!/usr/bin/env bash
      sudo apt update
      sudo apt -y install \
               build-essential \
               libssl-dev zlib1g-dev \
               libbz2-dev \
               libreadline-dev \
               libsqlite3-dev \
               curl \
               git \
               libncursesw5-dev \
               xz-utils \
               tk-dev \
               libxml2-dev \
               libxmlsec1-dev \
               libffi-dev \
               liblzma-dev
      EOF
      #
      chmod +x /home/student/.local/bin/*
      #
      cat /home/student/Projects/kind/bashrc >> /home/student/.bashrc
      cp /home/student/Projects/kind/vimrc /home/student/.vimrc
      #
      su -c "pipx install yamllint" - student
      su -c "pipx install pipenv" - student
      ip link show | grep br- | awk -F ':' '{print $2}' | tr -d ' ' | while read b; do ip link set "$b" down; ip link delete "$b" type bridge; done
      #
      sed -i 's@\(^export PATH=$HOME/.huber/bin:$PATH$\)@[ "${PATH#*$HOME/.huber/bin:}" == "$PATH" ] \&\& \1@' /home/student/.bashrc
      sed -i 's@\(^\[\[ -d $PYENV_ROOT/bin \]\] \&\& export PATH="$PYENV_ROOT/bin:$PATH"$\)@[ "${PATH#*$PYENV_ROOT/bin:}" == "$PATH" ] \&\& \1@' /home/student/.bashrc
      sed -i 's@^\(\s\+\)\(PATH="$HOME/.local/bin:$PATH"\)$@\1[ "${PATH#*$HOME/.local/bin:}" == "$PATH" ] \&\& \2@' /home/student/.profile
      chown -R student:student /home/student
      #
  owner: root:root
  path: /usr/local/bin/1-setup.sh
  permissions: "0755"
- content: |
      #!/usr/bin/env bash

      docker network create \
        --driver=bridge \
        --subnet=10.254.254.0/24 \
        --gateway=10.254.254.1 \
        --opt "com.docker.network.bridge.enable_ip_masquerade"="true" \
        --opt "com.docker.network.driver.mtu"="1500" \
        --ipv6 --subnet=fc00:f853:ccd:e793::/64 \
        kind
  owner: root:root
  path: /usr/local/bin/docker-network-kind.sh
  permissions: "0755"
- content: |
        fs.inotify.max_user_watches = 524288
        fs.inotify.max_user_instances = 512
  owner: root:root
  path: /etc/sysctl.d/99-kind.conf
  permissions: "0644"


# run commands
# default: none
# runcmd contains a list of either lists or a string
# each item will be executed in order at rc.local like level with
# output to the console
# - if the item is a list, the items will be properly executed as if
#   passed to execve(3) (with the first arg as the command).
# - if the item is a string, it will be simply written to the file and
#   will be interpreted by 'sh'
#
# Note, that the list has to be proper yaml, so you have to escape
# any characters yaml would eat (':' can be problematic)
runcmd:
 - apt-get -y purge nano
 - apt-get -y autoremove
 - /usr/local/bin/docker-network-kind.sh
 - systemctl restart docker.service
 - /usr/local/bin/1-setup.sh
 # - usermod -aG docker ubuntu
 # - tar -C /home/ubuntu --exclude ".ssh" -cvf - . | tar -C /home/student -xvf -
 - chown -R student:student /home/student
 - docker pull kindest/node:v1.32.2@sha256:f226345927d7e348497136874b6d207e0b32cc52154ad8323129352923a3142f


## poweroff or reboot system after finished
# default: none
power_state:
 delay: now
 mode: reboot
 message: Rebooting machine

